import{d as u,bA as c,bB as m,b7 as d,c as f,o as v,e as p,b9 as _,p as b,g as h,r as M,n as C}from"#entry";const k=u({__name:"mermaid",setup(x){const l=c(),{$mermaid:o}=m(),e=d(null),n=d(!1);let t="",a=null;const s=f(()=>l.value==="dark"?"dark":"default");async function i(){if(!(!e.value||!t))try{e.value.removeAttribute("data-processed"),e.value.textContent=t,await C(),o().initialize({startOnLoad:!1,theme:s.value}),await o().run({nodes:[e.value]}),n.value=!0}catch(r){console.error("Error running Mermaid:",r),e.value&&(e.value.innerHTML="⚠️ Mermaid Chart Syntax Error")}}return v(()=>{e.value&&(t=e.value.textContent?.trim()??"",a=new IntersectionObserver(r=>{r[0]?.isIntersecting&&!n.value&&(i(),a&&a.disconnect())},{threshold:.1}),a.observe(e.value))}),p(()=>{a&&a.disconnect()}),_(s,()=>{n.value&&i()}),(r,g)=>(h(),b("div",{ref_key:"mermaidContainer",ref:e,class:"mermaid"},[M(r.$slots,"default")],512))}}),y=Object.assign(k,{__name:"Mermaid"});export{y as default};
